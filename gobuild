#!/bin/bash

NEW_VER_LEVEL=3

while getopts ":l:" opt; do
  case $opt in
    l) NEW_VER_LEVEL="$OPTARG" ;;
    \?) echo "Invalid option -$OPTARG" >&2 ;;
  esac
done

echo $NEW_VER_LEVEL

#get highest tag number
VERSION=`git describe --abbrev=0 --tags`

#replace . with space so can split into an array
VERSION_BITS=(${VERSION//./ })

#get number parts and increase last one by 1
VNUM1=${VERSION_BITS[0]}
VNUM2=${VERSION_BITS[1]}
VNUM3=${VERSION_BITS[2]}
case $NEW_VER_LEVEL in
    1) VNUM1=$((VNUM1+1))
    VNUM2=0
    VNUM3=0 
    ;;
    2) VNUM2=$((VNUM2+1))
    VNUM3=0
    ;;
    3) VNUM3=$((VNUM3+1))
    ;;
esac

#create new tag
NEW_TAG="$VNUM1.$VNUM2.$VNUM3"

echo "Updating $VERSION to $NEW_TAG"

#get current hash and see if it already has a tag
GIT_COMMIT=`git rev-parse HEAD`
NEEDS_TAG=`git describe --contains $GIT_COMMIT`

#only tag if no tag already (would be better if the git describe command above could have a silent option)
if [ -z "$NEEDS_TAG" ]; then
    echo "Tagged with $NEW_TAG (Ignoring fatal:cannot describe - this means commit is untagged) "
    git tag $NEW_TAG
    git push --tags
else
    NEW_TAG=$NEEDS_TAG
    echo "Already a tag on this commit - $NEW_TAG" >&2
fi

go build -ldflags "-X main.Version=$NEW_TAG"
